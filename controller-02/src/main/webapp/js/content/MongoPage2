<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
<input id="textid">
<input type="button" class="btn btn-primary" onclick="search()" value="搜索">
<table class="table" id="mytable" border="1"></table>
<script type="text/javascript">
function search(){
	$("#mytable").bootstrapTable("refresh",{'pageNumber':1});
}
$(function(){
    $("#mytable").bootstrapTable({
//      url:"<%=request.getContextPath()%>/crud/queryPage.do",
        striped: true,//隔行变色
//        showColumns:true,//是否显示 内容列下拉框
//        showPaginationSwitch:true,//是否显示 数据条数选择框
        minimumCountColumns:1,//最小留下一个
//        showRefresh:true,//显示刷新按钮
//        showToggle:true,//显示切换视图
//     	search:true,//是否显示搜索框
//     	searchOnEnterKey:true,//设置为 true时，按回车触发搜索方法，否则自动触发搜索方法
        pagination:true,//开启分页
        paginationLoop:true,//开启分页无限循环
        pageNumber:1,//当前页数
        pageSize:2,//每页条数
        pageList:[2,3,4],//如果设置了分页，设置可供选择的页面数据条数。设置为All 则显示所有记录。
        sidePagination:"server",//分页方式：client客户端分页，server服务端分页（*） ，如果不分页，必须干掉！！！
        method:'post',//发送请求的方式
        contentType:"application/x-www-form-urlencoded",//必须的否则条件查询时会乱码
        queryParams:function(param){
//        	console.info(param.search)
//                var name= $("#empName").val();
//                 var sex = $("#sex").val();
//                 alert(name+","+sex);
//                 return 的数据 是传递到  action类中的参数

                return {
//                     "emp.empname":name,
                    "textid":$("#textid").val(),
                    page:this.pageNumber,//当前页
                    rows:this.pageSize //每页条数
                 }
           },
        columns: [
         {
             checkbox:true,
        },{
            field: 'companytype',
            title: '企业性质',
            width: 100,
            formatter: function(value,row,index){
        		return value == "1"?'国企':(value == "2" ? '私企' : "合资企业");
        	}
           
        },{
            field: 'c',
            title: '操作',
            width: 100, 
            formatter:function(value,row,index){
            	if(row.status=="0"){
            		return "<input type='button' value='修复' class='btn btn-success' onclick='upBic(\""+row.id+"\")'>";
            	}else{
            		 return "<input type='button' value='报维' class='btn btn-danger' onclick='upBic2(\""+row.id+"\")'>";
            	}              
             }
        }]
    })
})
</script>
</body>
</html>



<!--

----mongoDB两表查询分页
	@RequestMapping("queryPage")
	@ResponseBody
	public Object queryPage(Bicycles bicycles,int page,int rows){
		Query query=new Query();
		query.skip((page-1)*rows);
		query.limit(rows);
		if(bicycles.getDate1()!=null && bicycles.getDate1()!=""&&bicycles.getDate2()!=null && bicycles.getDate2()!=""){
			query.addCriteria(Criteria.where("bdate").gt(bicycles.getDate1()).lt(bicycles.getDate2()));
		}
		
		if(bicycles.getTypeid()!=null && bicycles.getTypeid()!=""){
			query.addCriteria(Criteria.where("typeid").is(bicycles.getTypeid()));
		}
		if(bicycles.getStatus()!=null && bicycles.getStatus()!=""){
			query.addCriteria(Criteria.where("status").is(bicycles.getStatus()));
		}
		
		List<Bicycles> BickclesList = mongoTemplate.find(query, Bicycles.class, "bicycles");
		List<BicycleType> BicycleTypeList = mongoTemplate.find(new Query(), BicycleType.class,"bicycleType");
		  for (int i = 0; i < BickclesList.size(); i++) {
			for (int j = 0; j < BicycleTypeList.size(); j++) {
				if(BickclesList.get(i).getTypeid().equals(BicycleTypeList.get(j).getId())){
					BickclesList.get(i).setName(BicycleTypeList.get(j).getName());
				}
			}
		}
		
		long total = mongoTemplate.count(query, Bicycles.class, "bicycles");
		JSONObject json=new JSONObject();
		json.put("total", total);
		json.put("rows", BickclesList);
		return json;
	}
-------修改状态
	@RequestMapping("/update")
	public String  update(String ids){
		Bicycles bicycle = new Bicycles();
		bicycle.setId(ids);
		Query query = Query.query(Criteria.where("id").is(bicycle.getId()));
		Update update = Update.update("id", bicycle.getId()).set("status","1");
		mongoTemplate.updateFirst(query, update, Bicycles.class);
		return "../../index";
		
	}
----批量删除

----jsp
	function del(){
	var rows= $("#mytable").bootstrapTable("getSelections");
	if (rows.length>=1) {
		var id="";
		for (var i = 0; i < rows.length; i++) {
			id+=rows[i].id+",";
		}
		$.ajax({
			url:"<%=request.getContextPath()%>/crud/del.do",
			type:"post",
			data:{"bid":id},
			dataType:"text",
			success:function (msg){
				location.reload();
			}
			
		})
		}else{
				alert("请至少选择一条数据")
			}
}
--controller
	@RequestMapping("del")
	@ResponseBody
	public String deleteB(String bid){
		String[] arr = bid.split(",");
		for (int i = 0; i < arr.length; i++) {
			Bicycles bicycle = new Bicycles();
			bicycle.setId(arr[i]);
			mongoTemplate.remove(bicycle);
		}
		return "1";
	}
 -->


<!--
----mongoDB查询全部 
	@RequestMapping("queryAll")
	@ResponseBody
	public Object queryAll(){
		List<Menus> trees = mongoTemplate.findAll(Menus.class,"menuTree");
		//                                          封装类                对应的mongoDB的表名
		return trees;
	}
----mongoDB查询分页
	@RequestMapping("queryPage")
	@ResponseBody
	public Object queryPage(int page,int rows,Menus menu){
		Query query = new Query(Criteria.where("text").regex(menu.getText()));
		query.skip((page-1)*rows);
		query.limit(rows);
//		query.with(new Sort("id"))
		List<Menus> trees = mongoTemplate.find(query,Menus.class,"menuTree");
		long total = mongoTemplate.count(new Query(Criteria.where("text").regex(menu.getText())), Menus.class,"menuTree");
		JSONObject json = new JSONObject();
		json.put("total", total);
		json.put("rows", trees);
		return json;
	}

 -->